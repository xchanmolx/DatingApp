ASPNET Core and Angular from scratch C#: 17. Publishing (new) - Video: 1 -> 00:00

git push -u origin master
git push -f origin master

Extensions:
C#
C# Extensions
NuGet Package Manager

// Web API
dotnet add package Microsoft.EntityFrameworkCore.SqlServer
dotnet add package Microsoft.EntityFrameworkCore.Design
dotnet tool install --global dotnet-ef --version 3.1.0
dotnet add package Microsoft.IdentityModel.Tokens --version 5.6.0
dotnet add package System.IdentityModel.Tokens.Jwt --version 5.6.0
dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer --version 3.1.1
dotnet add package Microsoft.AspNetCore.Mvc.NewtonsoftJson
using Microsoft.Extensions.DependencyInjection;
Ctrl + Shift P - Nuget Package Manager: Add Package - Search AutoMapper - AutoMapper.Extentions.Microsoft.DependencyInjection - Choose the latest version.
Ctrl + Shift P - Nuget Package Manager: Add Package - Search CloudinaryDotNet
dotnet user-secrets
dotnet user-secrets set "AppSettings:Token" "super secret key"
dotnet ef migrations add ExtendedUserClass
dotnet ef database update

// Client
npm install -g @angular/cli
ng new DatingApp-SPA
npm install bootstrap font-awesome alertifyjs
npm install @types/alertifyjs
npm install @auth0/angular-jwt
npm install ngx-bootstrap@3.0.1 --save
npm install bootswatch
npm install ngx-gallery
npm install ng2-file-upload --save
npm install time-ago-pipe --save
ng g guard auth --skipTests // cd to the _guards folder first, then ng g guard auth --skipTests, then Choose 'CanActivate'
delete .git

// Base Directory
git init
create new repository
copy git remote origin

Extensions:
Angular Snippets
Angular Files
Angular Language Service
Auto Rename Tag
Bracket Pair Colorizer
Debugger for Chrome
Material Icon Theme
Prettier
TSLint
angular2-switcher

DTO - Data Transfer Object

    [ApiController]
    [Route("api/[controller]")]
    public class ValuesController : ControllerBase
    {
        // GET api/values
        [HttpGet]
        public ActionResult<IEnumerable<string>> Get() 
        {
            return new string[] { "value1", "value2" };
        }

        // GET api/values/5
        [HttpGet("{id}")]
        public ActionResult<string> Get(int id)
        {
            return "value";
        }

        // POST api/values
        [HttpPost]
        public void Post([FromBody] string value)
        {

        }

        // PUT api/values/5
        [HttpPut("{id}")]
        public void Put(int id, [FromBody] string value)
        {

        }

        // DELETE api/values/5
        [HttpDelete("{id}")]
        public void Delete(int id)
        {

        }
    }